<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ayache Khettar</title>
    <link>https://www.cirta.dev/</link>
    <description>Recent content on Ayache Khettar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>2020 © Copyright Ayache khettar</copyright>
    <lastBuildDate>Thu, 16 Jul 2020 18:36:36 +0300</lastBuildDate>
    
	<atom:link href="https://www.cirta.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless Github Action Demo</title>
      <link>https://www.cirta.dev/post/serverless-demo/</link>
      <pubDate>Thu, 16 Jul 2020 18:36:36 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/serverless-demo/</guid>
      <description>In this brief post, I am going to show you how to automatically deploy lambda function using serverless and Github Action. You can access the source code of this demo in Github.
Why Serverless? Serverless is a cloud-agnostic framework which aims to facilitate the deployment of Lambda functions into the cloud. For AWS deployment, it uses AWS CloudFormation under the hood to deploy the stack into AWS. It supports many cloud providers such as AWS, GCP, Azure.</description>
    </item>
    
    <item>
      <title>CI Pipeline generator</title>
      <link>https://www.cirta.dev/post/ci-templater/</link>
      <pubDate>Wed, 15 Jul 2020 08:46:48 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/ci-templater/</guid>
      <description>I recently wrote a ci templater tool - see source code in Github. This tool generate CI config for any given CI tool (Github Action, Circleci) from a given generic CI template. It ensures consistency of the CI template across all the deployments. This tool is particularly useful with microservices architectural style becoming the norm nowadays, whereby several microservices would share the same deployment pipeline. This tool allows us to generate ci config for all these services from a one given ci template.</description>
    </item>
    
    <item>
      <title>How to publish REST API to AWS API Gateway from swagger doc</title>
      <link>https://www.cirta.dev/post/swagger-apigw/</link>
      <pubDate>Wed, 29 Apr 2020 19:22:55 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/swagger-apigw/</guid>
      <description>In my last project we used AWS api gateway to expose our backend services to the outside world. We wanted to automate the whole process of publishing the REST api of each service as part of the continuous integration pipeline. What this means is that after a given service is deployed to an environment, we pull the dynamically generated swagger document from that environment and publish all the endpoints to AWS API gateway.</description>
    </item>
    
    <item>
      <title>How to load secrets from the vault server once at runtime</title>
      <link>https://www.cirta.dev/post/vault-secrets/</link>
      <pubDate>Tue, 28 Apr 2020 11:19:47 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/vault-secrets/</guid>
      <description>Last year I joined a team of backend developer working on an innovative fintech product. Java was mainly used to write most of the backend services. I started experimenting with the Go language by writing REST services with a simple domain context. I was impressed by the simplicity of the language and I thought why not introduce it to the team. Of course there was some resistance to the suggestion and the main arguments revolved around the tooling and the vast amount of Java library we have at our disposition when writing the core backend services of the platform.</description>
    </item>
    
    <item>
      <title>How to publish Go documentation to the go.dev package repository</title>
      <link>https://www.cirta.dev/post/go-doc/</link>
      <pubDate>Sun, 26 Apr 2020 13:05:51 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/go-doc/</guid>
      <description>In this brief post I am going to show you how to automatically publish your Go doc library to Go package repository using Github action build pipeline. You do not need to generate documentation of your code locally then push it to repository. All you need is to let the Go package repository where your library is hosted then it will link it automatically.
All it is needed is to run the following command from your local machine</description>
    </item>
    
    <item>
      <title>Running integration tests against databases</title>
      <link>https://www.cirta.dev/post/dockerdb/</link>
      <pubDate>Sat, 25 Apr 2020 19:05:51 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/dockerdb/</guid>
      <description>I am going to show you how to write an integration test which requires connection to mongodb or a postgres database.
I have written a Go library that can be embedded in your integration test and will ensure the followings
 Run the desired DB container. Run the test suite. Destroy the container, i.e the container is stopped, deleted along the volume it has created.  Running Mongo DB container You can simply initiate mongo container as part of your test suite by including the below snippet in your integration test</description>
    </item>
    
    <item>
      <title>Using Cat Data Reader Monad</title>
      <link>https://www.cirta.dev/post/cat-reader/</link>
      <pubDate>Tue, 30 Apr 2019 18:15:06 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/cat-reader/</guid>
      <description>In this short post, I would like to introduce you the Reader monad — see cats documentation.
The first thing you need to know is that the Reader monad represents a function: A =&amp;gt; B
class Reader[A,B](run: A =&amp;gt; B) { // details omitted } We could use the Reader monad to achieve various things, but I would like to show you in this post how to use it to achieve composition and dependency injection.</description>
    </item>
    
  </channel>
</rss>