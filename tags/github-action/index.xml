<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github-action on Ayache Khettar</title>
    <link>https://www.cirta.dev/tags/github-action/</link>
    <description>Recent content in github-action on Ayache Khettar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>2020 Â© Copyright Ayache khettar</copyright>
    <lastBuildDate>Thu, 16 Jul 2020 18:36:36 +0300</lastBuildDate>
    
	<atom:link href="https://www.cirta.dev/tags/github-action/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless Github Action Demo</title>
      <link>https://www.cirta.dev/post/serverless-demo/</link>
      <pubDate>Thu, 16 Jul 2020 18:36:36 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/serverless-demo/</guid>
      <description>In this brief post, I am going to show you how to automatically deploy lambda function using serverless and Github Action. You can access the source code of this demo in Github.
Why Serverless? Serverless is a cloud-agnostic framework which aims to facilitate the deployment of Lambda functions into the cloud. For AWS deployment, it uses AWS CloudFormation under the hood to deploy the stack into AWS. It supports many cloud providers such as AWS, GCP, Azure.</description>
    </item>
    
    <item>
      <title>CI Pipeline generator</title>
      <link>https://www.cirta.dev/post/ci-templater/</link>
      <pubDate>Wed, 15 Jul 2020 08:46:48 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/ci-templater/</guid>
      <description>I recently wrote a ci templater tool - see source code in Github. This tool generate CI config for any given CI tool (Github Action, Circleci) from a given generic CI template. It ensures consistency of the CI template across all the deployments. This tool is particularly useful with microservices architectural style becoming the norm nowadays, whereby several microservices would share the same deployment pipeline. This tool allows us to generate ci config for all these services from a one given ci template.</description>
    </item>
    
    <item>
      <title>How to publish Go documentation to the go.dev package repository</title>
      <link>https://www.cirta.dev/post/go-doc/</link>
      <pubDate>Sun, 26 Apr 2020 13:05:51 +0300</pubDate>
      
      <guid>https://www.cirta.dev/post/go-doc/</guid>
      <description>In this brief post I am going to show you how to automatically publish your Go doc library to Go package repository using Github action build pipeline. You do not need to generate documentation of your code locally then push it to repository. All you need is to let the Go package repository where your library is hosted then it will link it automatically.
All it is needed is to run the following command from your local machine</description>
    </item>
    
  </channel>
</rss>